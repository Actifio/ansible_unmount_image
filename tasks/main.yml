---

# check for undefined critical variables
- fail:
    msg: the variable "{{ item }}" should be defined.
  when: item == ''
  with_items:
    - "{{ act_pass }}"
    - "{{ act_vendorkey }}"
    - "{{ act_user }}"
    - "{{ act_mount_host }}"

# Generate a login token using the username, password and vendorkey
- name: generating authentication token 
  uri:
    url: "{{ act_api_login }}"
    validate_certs: no  
  register: logintoken

- name: session id is a fact
  set_fact: 
    act_sessionid: "{{ logintoken.json.sessionid }}"

# try to ascertain the mounted hostID
- name: search for host_id from name
  block:
    - uri:
        url: "{{ act_api_info }}/lshost?sessionid={{ act_sessionid }}&filtervalue={{ 'hostname=' | urlencode }}{{ act_mount_host }}"
        validate_certs: no
      register: hostid

    - set_fact:
        mounted_host_id: "{{ hostid.json.result.0.id }}"
      when: hostid is defined

# Fail if the host could not be found
- name: fail when the management or target host cannot be found
  fail:
    msg: "Unable to find a hostID with a matching description"
  when: item == ''
  with_items:
    - "{{ mounted_host_id }}"

# Get Image Name from act_appname
- name: get image name from act_appname
  block:
    - name: get lsapplication
      uri:
        url: "{{ act_api_info }}/lsapplication?sessionid={{ act_sessionid }}&filtervalue={{ 'hostid=' | urlencode }}{{ mounted_host_id }}{{ '&appname=' | urlencode }}{{ act_appname | urlencode }}"
        validate_certs: no
      register: lsapplication

    - name: set fact application id
      set_fact:
        appid: "{{ lsapplication.json.result[0].id }}"
        
    - name: fail if appid was not found.
      fail:
        msg: "{{ act_appname }} aaplication was not found."
      when: appid == ''

    - name: get lsapplication detail
      uri:
        url: "{{ act_api_info }}/lsapplication?sessionid={{ act_sessionid }}&argument={{ appid }}"
        validate_certs: no
      register: lsapplicationdetail

    - name: set fact image name
      set_fact:
        act_image_name: "{{ lsapplicationdetail.json.result.backupname }}"

  when: act_appname != ''

# Filter mounted images with hostid
- name: get mounted image list with the hostid
  uri:
    url: "{{ act_api_info }}/lsbackup?filtervalue={{ 'jobclass=mount' | urlencode }}{{ '&mountedhost=' | urlencode }}{{ mounted_host_id }}&sessionid={{ act_sessionid }}"
    validate_certs: no
  register: lsbackup

# Debug
- debug: var=lsbackup

# Unmount mounted images
- name: unmount mounted image 
  uri:
    url: "{{ act_api_task}}/unmountimage?image={{ item.backupname }}&sessionid={{ act_sessionid }}&nowait&delete&force"
    validate_certs: no
    method: POST
    timeout: 180
  when: 
    - act_image_name == "all" or item.backupname == act_image_name 
    - act_label == '' or item.label == act_label 
  with_items: "{{ lsbackup.json.result }}"      
